#pragma once
#include "stdafx.h"
#include "Model.h"
#include "Effect.h"
/*
	This is the class that should be extended by all classes that are supposed to be put in the scene and have position and orientation.
	If you wish to extend this class any of its children, several things are required:
	1.	Extend ActorDesc or its respective child, associated with the child actor class
		Ex: GameObjectDesc with GameObject
	2.	Create 2 constructors for the ChildDesc class, ChildDesc() and ChildDesc(string data).
		ChildDesc() class doesn't have to do anything, except set the variables to default states.
		ChildDesc(string data) should be taking data from the *Desc.bindings collection, that is automatically generated by ActorDesc(string data)
		#More on bindings in the BindingCollection.h file
	3.	Create a Child() constructor and override void loadFromDesc(ActorDesc &desc) function
		In it, the first lines should be:
			Actor::loadFromDesc(desc);
			ChildDesc &cDesc=castDesc<ChildDesc>(desc);
	4.	Whenever you are creating an instance of Child from data, you must do it like this:
			Child child=Child();
			child.loadFromData<ChildDesc>(data);
	5.	If you wish to make it automatically load within a scene, you have to go to Scene::loadActor(string, string)
		and add if(lcName=="child")
				{
					load<Child, ChildDesc>(content);
				}

*/
class ActorDesc
{
public:
	ActorDesc();
	ActorDesc(string data);
	vec3 position, velocity;
	quat rotation;
	string name;
	bool bVisible;
protected:
	virtual void virtualTrigger(){}
	BindingCollection bindings;
};
class Actor
{
public:
	Actor();
	bool bVisible = true;
	virtual ~Actor();
	std::string name;
	template<typename T>
	void loadFromData(string data)
	{
		T desc(data);
		loadFromDesc(desc);
	}
	template<typename T>
	T& castDesc(ActorDesc &desc)
	{
		T &cDesc = dynamic_cast<T&>(desc);
		return cDesc;
	}
	virtual void loadFromDesc(ActorDesc &desc);
	//accessors
	virtual vec3 getPosition();
	virtual vec3 getUp();
	virtual vec3 getForward();
	virtual quat getRotation();
	//virtual quat getAngVel();
	//virtual quat getAngAcc();

	virtual void setPosition(vec3&v);
	virtual void setVelocity(vec3&v);
	virtual void setAcceleration(vec3&v);
	virtual void setUp(vec3&v);
	virtual void setForward(vec3&v);
	virtual void setRotation(quat&);
	//virtual void setAngVel(quat&q);
	//virtual void setAngAcc(quat&q);

	virtual void addPosition(vec3&);
	virtual void addVelocity(vec3&);
	virtual void addAcceleration(vec3&v);
	virtual void addRotation(quat&q);
	//virtual void addAngVel(quat&q);
	//virtual void addAngAcc(quat&);

	virtual void Update(real dTime);
protected:
	vec3 getRotatedVec3(vec3 &v);
	vec3 position, up, forward;
	vec3 velocity, acceleration;
	quat rotation;// , angularVelocity, angularAcceleration;
};

